import numpy as np
import matplotlib.pyplot as plt
import random

N = 5                     # number of agents
states = np.arange(6)     # capital levels 0..5
actions = np.array([0, 1, 2])  # save, small invest, big invest
alpha = 0.1               # learning rate
gamma = 0.9               # discount factor
epsilon = 0.2             # exploration
beta = 0.5                # crowding penalty
growth = np.array([0, 1, 2])
investment_cost = np.array([0, 1, 3])
T = 50  


w = np.random.randint(0,3, N)
Q_tables = [np.zeros((len(states), len(actions))) for _ in range(N)]
history = [w.copy()]

def choose_action(Q, state_idx):
    if np.random.rand() < epsilon:
        return np.random.choice(len(actions))
    else:
        return np.argmax(Q[state_idx])
    
for t in range(T):
    mean = np.mean(w)
    for i in range(N):

        current_state = w[i]
        action_choice = choose_action(Q_tables[i], current_state)
        a = actions[action_choice]

        reward = w[i] - investment_cost[action_choice] - beta * abs(w[i] - mean)

        next_w = np.clip(w[i] + growth[action_choice], 0, states[-1])

        Q_tables[i][current_state, action_choice] += alpha * (
    reward + gamma * np.max(Q_tables[i][next_w, :]) - Q_tables[i][current_state, action_choice]
)
        
        # Set new capital
        w[i] = next_w

    history.append(w.copy())


plt.figure(figsize=(8,5))
history = np.array(history)
for i in range(N):
    plt.plot(history[:, i], label=f'Agent {i+1}')
plt.xlabel('Time Step')
plt.ylabel('Capital Level')
plt.title('Capital Evolution of 5 Agents (Mean Field Investment)')
plt.legend()
plt.grid(True)
plt.show()

# Optional: plot mean capital over time
mean_history = history.mean(axis=1)
plt.figure(figsize=(8,5))
plt.plot(mean_history, color='black', linewidth=2)
plt.xlabel('Time Step')
plt.ylabel('Mean Capital Level')
plt.title('Mean Capital Level Over Time')
plt.grid(True)
plt.show()


